<!DOCTYPE html>
<html>
 
<head>
    <title>Passport with Sequelize</title>
</head>
 
<body>
    <h2>Dashboard</h2>
    <h5>Hurray! you are logged in.</h5>
    <!-- Object passed from the second parameter of res.render() in "routes"-->
    <h1>{{user.firstname}}</h3>
    <a href="/logout" class="button">Want to logout?</a>

    <!-- 5.2 Send a todo to the database, and list them out below-->
    <h1>Create a Todo below!</h1>

    <!-- 'name' and 'id' of the form really isn't that important -->
    <!-- 'class' attributes on input fields aren't that important either - unless you want CSS -->
    <!-- On submit: we immediately enter deserializeUser of passport
        and start finding the user id, User.findById(id),
        Once execution leaves deserialization, holding particular user information, we enter the '/todoPOST' route handler 
            Execution will find itself inside of app/routes/todo, where this route handler resides
    -->
    <form id="todo" name="todo" method="post" action="/todoPOST">
        <label for="todo">To Do</label>
        <input class="text" name="todo" type="text" required/>
        <input class="btn" type="submit" value="Submit your To Do" />
    </form>

    <h1> Your todo list:</h1>

    <!-- 5.2 Use handlebars syntax to iterate through array, and display all of its items-->
    {{#each TodoList}}
    <p>{{this.todo}}</p>
    
    <!-- 9. We want a button to make a request to the backend
            We can accomplish this by wrapping the button with a form!
        Remember: forms can only handle POST and GET requests
            To delete a todo, the workaround would be to send a POST request, 
                where we will delete a todo off a database table inside a router.post() in the backend
        
        The id of this particular todo is {{this.id}}

        For handling a delete: we will redirect the execution (using 'action' attribute), with a particular todo 'id' inside the URL
                We will have: 'action="/delete/{{someId}}"'
            Inside the backend, we have a '/delete/:id' router, that router will recognize this /delete/ + (some id integer), thanks to the ':' colon,
                and will allow execution to enter that '/delete/:id' handler!
            Example: If 'todo' has id# 423: 
                1. The action of 'action="/delete/{{someId}}"' will be 'action="/delete/423"'
                2. We will enter the 'delete/:id' URL as 'delete/432'
                3. Inside 'delete/:id' we will use req.params to look inside the URL
                4. Because we said ':id' for the backend handler, this allows the 'id' variable to attach to the req.params as req.params.id = 423
                5. Backend router has all of the necessary information to delete a particular todo off the database! Use Model.destroy(),
                    with the correct where: location
    -->
    <form action="/delete/{{this.id}}" method="post">
        <input type="submit" name="Delete Todo" value="Delete Todo" />
    </form>
    
    {{/each}}

    <!-- 
        To display the FULL variable, use the following:
        <p>{{TodoList}}</p>
    -->
 
</body>
 
</html>